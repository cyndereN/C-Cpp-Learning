// 成员函数加const后成这个函数为常函数
// 常函数内不可以修改成员属性
// 加了关键字mutable依然可以修改

// - const就是只读的意思,只在声明中使用;
// - static一般有2个作用,规定作用域和存储方式。
// 对于局部变量,static规定其为静态存储方式,每次调用的初始值为上一次调用的值,调用结束后存储空间不释放;
// 对于全局变量,如果以文件划分作用域的话,此变量只在当前文件可见;对于static函数也是在当前模块内函数可见.
// static const 应该就是上面两者的合集.

///-----------------------------------------------------------------------

// 1.static关键字用于声明静态变量、静态函数或静态成员变量、静态成员函数，
// 用来指示它们具有静态生命周期，即在整个程序执行期间都存在，并且可以被同一类的所有对象共享。
// 而const关键字用于声明常量，表示变量在定义后就不能再被修改。

// 2.static关键字可以用于改变变量或函数的作用域，即将其限制在当前文件或当前类中，
// 而const关键字则用于指定一个变量是只读的。

// 3. static变量和函数的初始化只会在第一次使用时进行，而const变量则必须在定义时进行初始化。

// 4. static成员变量可以通过类名来访问，而非静态成员变量必须通过对象名来访问。


// 注意：成员变量中const 关键字不能与 static 关键字同时使用，因为 static 关键字修饰静态成员函数，
// 静态成员函数不含有 this 指针，即不能实例化，const 成员函数必须具体到某一实例。



// 2.常对象
// 声明对象前加const称该对象为常对象
// 常对象只能访问被const修饰的成员（包括const 成员变量和const 成员函数）
// 常对象可以修改静态变量的值

class Person {
public:
	void showPerson() const
	{
		m_A = 100; // !此时不可以修改了
		// this 指针的本质是指针常量 指针指向不可修改
		// 而加了const，变成const Person* const this 指向和指向的值都不能改
		this->m_B = 100;
	}

	void func() {

	}

	int m_A;
	mutable int m_B; // 特殊变量，即使在常函数中，也可修改
};


void test02() {
	const Person p;  // 常对象
	p.m_A = 100; // !错误，不能改
	p.m_B = 100; // 常对象下也可以修改

	p.func(); //!不允许
	p.showPerson(); // 允许，常对象只能调用常函数
}